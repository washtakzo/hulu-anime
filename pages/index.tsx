import Head from "next/head";
import React from "react";
import AnimeCard from "../components/AnimeCard";
import Header from "../components/Header";
import { useSelector } from "react-redux";
import Footer from "../components/Footer";
import useFetchAnimes from "../hooks/useFetchAnimes";

type d_anime = {
  title: string;
  coverImage: string;
  description: string;
};
type d_animes = d_anime[];

const DUMMY_ANIME: d_anime = {
  title: "title",
  coverImage:
    "https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx124395-9GeigGh1Ae2f.png",
  description: "description !!!",
};
const DUMMY_ANIMES: d_animes = Array(24).fill(DUMMY_ANIME);
const dummy_fun = async (): Promise<d_animes> => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(DUMMY_ANIMES);
    }, 4000);
  });
};

export default function Home() {
  const { isLoading, animes, error } = useFetchAnimes();

  return (
    <div>
      <Head>
        <title>Hulu Anime</title>
        <meta name="Hulu Anime" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <main className="bg-[#0D1C23]">
        <div
          className="grid py-8 grid-cols-2 md:grid-cols-3 lg:grid-cols-4 
                        xl:grid-cols-5 2xl:grid-cols-6 3xl:grid-cols-7 gap-4  
                        w-[360px] sm:w-[440px] md:w-[660px] lg:w-[860px] xl:w-[1080px] 
                        2xl:w-[1300px] 3xl:w-[1400px] m-auto"
        >
          {isLoading &&
            Array(24)
              .fill(0)
              .map((_) => (
                <AnimeCard key={Math.random()} anime={null} isFetching={true} />
              ))}
          {!isLoading && error && <h2>Erreur Serveur</h2>}
          {!isLoading &&
            !error &&
            animes.map((anime) => (
              <AnimeCard key={Math.random()} anime={anime} isFetching={false} />
            ))}
        </div>
      </main>

      <Footer />
    </div>
  );
}

// export async function getServerSideProps() {
//   const animes = await getAnimeQuery.getTrendingAnime();
//   return {
//     props: {
//       animes,
//     },
//   };
// }
