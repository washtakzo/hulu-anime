import Head from "next/head";
import React from "react";
import AnimeCard from "../components/AnimeCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import useFetchAnimes from "../hooks/useFetchAnimes";
import getAnimeQuery from "../requests";

const animeGridContainerClass = `grid py-8 grid-cols-2 md:grid-cols-3 lg:grid-cols-4 
xl:grid-cols-5 2xl:grid-cols-6 3xl:grid-cols-7 
 m-auto w-[370px] sm:w-[440px] md:w-[660px] lg:w-[860px] xl:w-[1080px] 
 2xl:w-[1300px] 3xl:w-[1400px]`;

export default function Home(props) {
  const { isLoading, animes, error } = useFetchAnimes();
  const animesToDisplay = animes || props.animes;

  return (
    <>
      <Head>
        <title>Hulu Anime</title>
        <meta name="Hulu Anime" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col min-h-screen justify-between">
        <div>
          <Header />
          <main>
            {!isLoading && error && (
              <>
                <h2 className=" text-center text-xl mt-20 font-semibold ">
                  The following error occured :
                  <br />
                  <br />
                  <span className="text-red-400">[{error.message}]</span>
                  <br />
                  <br />
                  please try again later
                </h2>
                <div className={animeGridContainerClass}>
                  {Array(6)
                    .fill(0)
                    .map((_) => (
                      <AnimeCard
                        key={Math.random()}
                        anime={null}
                        isFetching={true}
                      />
                    ))}
                </div>
              </>
            )}
            <div className={animeGridContainerClass}>
              {isLoading &&
                Array(6)
                  .fill(0)
                  .map((_) => (
                    <AnimeCard
                      key={Math.random()}
                      anime={null}
                      isFetching={true}
                    />
                  ))}
              {!isLoading &&
                !error &&
                animesToDisplay.map((anime) => (
                  <AnimeCard
                    key={Math.random()}
                    anime={anime}
                    isFetching={false}
                  />
                ))}
            </div>
          </main>
        </div>
        <Footer />
      </div>
    </>
  );
}

export async function getServerSideProps() {
  const animes = await getAnimeQuery.getTrendingAnime();
  return {
    props: {
      animes,
    },
  };
}
